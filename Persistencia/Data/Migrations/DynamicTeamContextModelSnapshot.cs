// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(DynamicTeamContext))]
    partial class DynamicTeamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Arl", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Arl", (string)null);
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Id_region")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_region");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Ciudades", (string)null);
                });

            modelBuilder.Entity("Dominio.Cliente", b =>
                {
                    b.Property<string>("IdCodigo")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Edad")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Id_sucursal")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Documento")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdCodigo")
                        .IsUnique();

                    b.HasIndex("Id_sucursal");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("Dominio.Empleado", b =>
                {
                    b.Property<string>("IdCodigo")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Area_trabajo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Edad")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Id_arl")
                        .HasColumnType("int");

                    b.Property<int>("Id_eps")
                        .HasColumnType("int");

                    b.Property<int?>("Id_sucursal")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Id_tipo_empleado")
                        .HasColumnType("int");

                    b.Property<int>("Id_tipo_especialidad")
                        .HasColumnType("int");

                    b.Property<int>("Id_tipo_sangre")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Documento")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdCodigo")
                        .IsUnique();

                    b.HasIndex("Id_arl");

                    b.HasIndex("Id_eps");

                    b.HasIndex("Id_sucursal");

                    b.HasIndex("Id_tipo_empleado");

                    b.HasIndex("Id_tipo_especialidad");

                    b.HasIndex("Id_tipo_sangre");

                    b.ToTable("Empleados", (string)null);
                });

            modelBuilder.Entity("Dominio.Empresa_taller", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nit_empresa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Nit_empresa")
                        .IsUnique();

                    b.ToTable("Empresas_taller", (string)null);
                });

            modelBuilder.Entity("Dominio.Eps", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre_eps")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Eps", (string)null);
                });

            modelBuilder.Entity("Dominio.Estado_reparacion", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Id_ordenReparacion")
                        .HasColumnType("int");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_ordenReparacion");

                    b.ToTable("Estado_reparaciones", (string)null);
                });

            modelBuilder.Entity("Dominio.Factura", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_salida")
                        .HasColumnType("dateTime");

                    b.Property<string>("Forma_pago")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Id_ordenReparacion")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor_manoObra")
                        .HasColumnType("decimal");

                    b.Property<decimal>("Valor_total")
                        .HasColumnType("decimal");

                    b.Property<decimal>("Valor_totalReparacion")
                        .HasColumnType("decimal");

                    b.Property<decimal>("Valor_totalRepuesto")
                        .HasColumnType("decimal");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_ordenReparacion")
                        .IsUnique();

                    b.ToTable("Facturas", (string)null);
                });

            modelBuilder.Entity("Dominio.Hallazgo_encontrado", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Id_personalResponsable")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_hallazgo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_personalResponsable");

                    b.ToTable("Hallazgos_encontrados", (string)null);
                });

            modelBuilder.Entity("Dominio.Ingreso_taller", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_ingreso")
                        .HasColumnType("dateTime");

                    b.Property<int>("Id_servicioEspecializado")
                        .HasColumnType("int");

                    b.Property<string>("Id_vehiculo")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_servicioEspecializado");

                    b.HasIndex("Id_vehiculo");

                    b.ToTable("Ingresos_taller", (string)null);
                });

            modelBuilder.Entity("Dominio.Inspeccion_vehiculo", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Diagnostico_cliente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Farola_F_derecha")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Farola_F_izquierda")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Farola_T_derecha")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Farola_T_izquierda")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Id_empleado")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Id_ingresoTaller")
                        .HasColumnType("int");

                    b.Property<string>("Muebles")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Otros")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Puerta_F_derecha")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Puerta_F_izquierda")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Puerta_T_derecha")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Puerta_T_izquierda")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Radio_estado")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Radio_marca")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Rueda_F_derecha")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Rueda_F_izquierda")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Rueda_T_derecha")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Rueda_T_izquierda")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Tapetes")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Techo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_empleado");

                    b.HasIndex("Id_ingresoTaller");

                    b.ToTable("Inspecciones_vehiculos", (string)null);
                });

            modelBuilder.Entity("Dominio.Orden_reparacion", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Fecha_salidaEstimada")
                        .HasColumnType("dateTime");

                    b.Property<int>("Id_ingresoTaller")
                        .HasColumnType("int");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_ingresoTaller")
                        .IsUnique();

                    b.ToTable("Orden_reparaciones", (string)null);
                });

            modelBuilder.Entity("Dominio.Pais", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Paises", (string)null);
                });

            modelBuilder.Entity("Dominio.Personal_responsable", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Diagnostico_taller")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Id_empleado")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Id_ingresoTaller")
                        .HasColumnType("int");

                    b.Property<string>("Tiempo_reparacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_empleado");

                    b.HasIndex("Id_ingresoTaller");

                    b.ToTable("Personal_responsables", (string)null);
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.Property<string>("IdCodigo")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Id_tipoCategoria")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_producto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("IdCodigo")
                        .IsUnique();

                    b.HasIndex("Id_tipoCategoria");

                    b.ToTable("Productos", (string)null);
                });

            modelBuilder.Entity("Dominio.Producto_proveedor", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Id_producto")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Id_proveedor")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_producto");

                    b.HasIndex("Id_proveedor");

                    b.ToTable("Productos_proveedores", (string)null);
                });

            modelBuilder.Entity("Dominio.Producto_sucursal", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Estado_producto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Id_producto")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Id_sucursal")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PrecioCompraVU")
                        .HasColumnType("decimal");

                    b.Property<decimal>("PrecioVentaVU")
                        .HasColumnType("decimal");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_producto");

                    b.HasIndex("Id_sucursal");

                    b.ToTable("Productos_sucursales", (string)null);
                });

            modelBuilder.Entity("Dominio.Proveedor", b =>
                {
                    b.Property<string>("IdCodigo")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Email_contacto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Forma_pago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Id_sucursal")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Nit_proveedor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Email_contacto")
                        .IsUnique();

                    b.HasIndex("IdCodigo")
                        .IsUnique();

                    b.HasIndex("Id_sucursal");

                    b.ToTable("Proveedores", (string)null);
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Id_pais")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_pais");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Regiones", (string)null);
                });

            modelBuilder.Entity("Dominio.Repuesto_cambiar", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Id_ordenReparacion")
                        .HasColumnType("int");

                    b.Property<int>("Id_personalResponsable")
                        .HasColumnType("int");

                    b.Property<int>("Id_productoSucursal")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Valor_unitario")
                        .HasColumnType("decimal");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_ordenReparacion");

                    b.HasIndex("Id_personalResponsable");

                    b.HasIndex("Id_productoSucursal")
                        .IsUnique();

                    b.ToTable("Repuestos_cambiar", (string)null);
                });

            modelBuilder.Entity("Dominio.Servicio_especializado", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre_servicio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCodigo");

                    b.ToTable("Servicios_especializados", (string)null);
                });

            modelBuilder.Entity("Dominio.Sucursal", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Encargado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Id_ciudad")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Id_empresa")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Nit_sucursal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id_ciudad");

                    b.HasIndex("Id_empresa");

                    b.HasIndex("Nit_sucursal")
                        .IsUnique();

                    b.ToTable("Sucursales", (string)null);
                });

            modelBuilder.Entity("Dominio.TelefonoMovil", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Id_cliente")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Id_empleado")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Id_proveedor")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Id_tipoTelefonoMovil")
                        .HasColumnType("int");

                    b.Property<string>("Numero_telefonoMovil")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("Id_cliente");

                    b.HasIndex("Id_empleado");

                    b.HasIndex("Id_proveedor");

                    b.HasIndex("Id_tipoTelefonoMovil");

                    b.ToTable("TelefonosMoviles", (string)null);
                });

            modelBuilder.Entity("Dominio.Tipo_categoria", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre_categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCodigo");

                    b.ToTable("Tipos_categorias", (string)null);
                });

            modelBuilder.Entity("Dominio.Tipo_empleado", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCodigo");

                    b.ToTable("Tipos_empleados", (string)null);
                });

            modelBuilder.Entity("Dominio.Tipo_especialidad", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCodigo");

                    b.ToTable("Tipos_especialidades", (string)null);
                });

            modelBuilder.Entity("Dominio.Tipo_sangre", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdCodigo");

                    b.ToTable("Tipos_sangre", (string)null);
                });

            modelBuilder.Entity("Dominio.Tipo_telefonoMovil", b =>
                {
                    b.Property<int>("IdCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre_tipoTelMov")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCodigo");

                    b.ToTable("Tipos_telefonosMoviles", (string)null);
                });

            modelBuilder.Entity("Dominio.Vehiculo", b =>
                {
                    b.Property<string>("IdCodigo")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Id_cliente")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Km")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Motor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCodigo");

                    b.HasIndex("IdCodigo")
                        .IsUnique();

                    b.HasIndex("Id_cliente");

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.HasIndex("Referencia")
                        .IsUnique();

                    b.HasIndex("Vin")
                        .IsUnique();

                    b.ToTable("Vehiculos", (string)null);
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.HasOne("Dominio.Region", "Region")
                        .WithMany("Ciudades")
                        .HasForeignKey("Id_region")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Dominio.Cliente", b =>
                {
                    b.HasOne("Dominio.Sucursal", "Sucursal")
                        .WithMany("Clientes")
                        .HasForeignKey("Id_sucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Dominio.Empleado", b =>
                {
                    b.HasOne("Dominio.Arl", "Arl")
                        .WithMany("Empleados")
                        .HasForeignKey("Id_arl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Eps", "Eps")
                        .WithMany("Empleados")
                        .HasForeignKey("Id_eps")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Sucursal", "Sucursal")
                        .WithMany("Empleados")
                        .HasForeignKey("Id_sucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Tipo_empleado", "Tipo_empleado")
                        .WithMany("Empleados")
                        .HasForeignKey("Id_tipo_empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Tipo_especialidad", "Tipo_especialidad")
                        .WithMany("Empleados")
                        .HasForeignKey("Id_tipo_especialidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Tipo_sangre", "Tipo_sangre")
                        .WithMany("Empleados")
                        .HasForeignKey("Id_tipo_sangre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arl");

                    b.Navigation("Eps");

                    b.Navigation("Sucursal");

                    b.Navigation("Tipo_empleado");

                    b.Navigation("Tipo_especialidad");

                    b.Navigation("Tipo_sangre");
                });

            modelBuilder.Entity("Dominio.Estado_reparacion", b =>
                {
                    b.HasOne("Dominio.Orden_reparacion", "Orden_reparacion")
                        .WithMany("Estado_reparaciones")
                        .HasForeignKey("Id_ordenReparacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden_reparacion");
                });

            modelBuilder.Entity("Dominio.Factura", b =>
                {
                    b.HasOne("Dominio.Orden_reparacion", "Orden_reparacion")
                        .WithOne("Factura")
                        .HasForeignKey("Dominio.Factura", "Id_ordenReparacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden_reparacion");
                });

            modelBuilder.Entity("Dominio.Hallazgo_encontrado", b =>
                {
                    b.HasOne("Dominio.Personal_responsable", "Personal_responsable")
                        .WithMany("Hallazgos_encontrados")
                        .HasForeignKey("Id_personalResponsable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personal_responsable");
                });

            modelBuilder.Entity("Dominio.Ingreso_taller", b =>
                {
                    b.HasOne("Dominio.Servicio_especializado", "Servicio_especilizado")
                        .WithMany("Ingresos_Taller")
                        .HasForeignKey("Id_servicioEspecializado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Vehiculo", "Vehiculo")
                        .WithMany("Ingresos_Taller")
                        .HasForeignKey("Id_vehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servicio_especilizado");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Dominio.Inspeccion_vehiculo", b =>
                {
                    b.HasOne("Dominio.Empleado", "Empleado")
                        .WithMany("Inspecciones_vehiculos")
                        .HasForeignKey("Id_empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Ingreso_taller", "Ingreso_taller")
                        .WithMany("Inspecciones_Vehiculos")
                        .HasForeignKey("Id_ingresoTaller")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Ingreso_taller");
                });

            modelBuilder.Entity("Dominio.Orden_reparacion", b =>
                {
                    b.HasOne("Dominio.Ingreso_taller", "Ingreso_taller")
                        .WithOne("Orden_reparacion")
                        .HasForeignKey("Dominio.Orden_reparacion", "Id_ingresoTaller")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingreso_taller");
                });

            modelBuilder.Entity("Dominio.Personal_responsable", b =>
                {
                    b.HasOne("Dominio.Empleado", "Empleado")
                        .WithMany("Personal_responsables")
                        .HasForeignKey("Id_empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Ingreso_taller", "Ingreso_taller")
                        .WithMany("Personal_responsables")
                        .HasForeignKey("Id_ingresoTaller")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Ingreso_taller");
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.HasOne("Dominio.Tipo_categoria", "Tipo_categoria")
                        .WithMany("Productos")
                        .HasForeignKey("Id_tipoCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tipo_categoria");
                });

            modelBuilder.Entity("Dominio.Producto_proveedor", b =>
                {
                    b.HasOne("Dominio.Producto", "Producto")
                        .WithMany("Productos_proveedores")
                        .HasForeignKey("Id_producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Proveedor", "Proveedor")
                        .WithMany("Productos_proveedores")
                        .HasForeignKey("Id_proveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.Producto_sucursal", b =>
                {
                    b.HasOne("Dominio.Producto", "Producto")
                        .WithMany("Productos_sucursales")
                        .HasForeignKey("Id_producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Sucursal", "Sucursal")
                        .WithMany("Productos_sucursales")
                        .HasForeignKey("Id_sucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Dominio.Proveedor", b =>
                {
                    b.HasOne("Dominio.Sucursal", "Sucursal")
                        .WithMany("Proveedores")
                        .HasForeignKey("Id_sucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.HasOne("Dominio.Pais", "Pais")
                        .WithMany("Regiones")
                        .HasForeignKey("Id_pais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Dominio.Repuesto_cambiar", b =>
                {
                    b.HasOne("Dominio.Orden_reparacion", "Orden_reparacion")
                        .WithMany("Repuestos_cambiar")
                        .HasForeignKey("Id_ordenReparacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Personal_responsable", "Personal_responsable")
                        .WithMany("Repuestos_cambiar")
                        .HasForeignKey("Id_personalResponsable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Producto_sucursal", "Producto_sucursal")
                        .WithOne("Repuesto_cambiar")
                        .HasForeignKey("Dominio.Repuesto_cambiar", "Id_productoSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden_reparacion");

                    b.Navigation("Personal_responsable");

                    b.Navigation("Producto_sucursal");
                });

            modelBuilder.Entity("Dominio.Sucursal", b =>
                {
                    b.HasOne("Dominio.Ciudad", "Ciudad")
                        .WithMany("Sucursales")
                        .HasForeignKey("Id_ciudad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Empresa_taller", "Empresa_Taller")
                        .WithMany("Sucursales")
                        .HasForeignKey("Id_empresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");

                    b.Navigation("Empresa_Taller");
                });

            modelBuilder.Entity("Dominio.TelefonoMovil", b =>
                {
                    b.HasOne("Dominio.Cliente", "Cliente")
                        .WithMany("TelefonosMoviles")
                        .HasForeignKey("Id_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Empleado", "Empleado")
                        .WithMany("TelefonosMoviles")
                        .HasForeignKey("Id_empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Proveedor", "Proveedor")
                        .WithMany("TelefonosMoviles")
                        .HasForeignKey("Id_proveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Tipo_telefonoMovil", "Tipo_telefonoMovil")
                        .WithMany("TelefonosMoviles")
                        .HasForeignKey("Id_tipoTelefonoMovil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");

                    b.Navigation("Proveedor");

                    b.Navigation("Tipo_telefonoMovil");
                });

            modelBuilder.Entity("Dominio.Vehiculo", b =>
                {
                    b.HasOne("Dominio.Cliente", "Cliente")
                        .WithMany("Vehiculos")
                        .HasForeignKey("Id_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Dominio.Arl", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.Navigation("Sucursales");
                });

            modelBuilder.Entity("Dominio.Cliente", b =>
                {
                    b.Navigation("TelefonosMoviles");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Dominio.Empleado", b =>
                {
                    b.Navigation("Inspecciones_vehiculos");

                    b.Navigation("Personal_responsables");

                    b.Navigation("TelefonosMoviles");
                });

            modelBuilder.Entity("Dominio.Empresa_taller", b =>
                {
                    b.Navigation("Sucursales");
                });

            modelBuilder.Entity("Dominio.Eps", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Ingreso_taller", b =>
                {
                    b.Navigation("Inspecciones_Vehiculos");

                    b.Navigation("Orden_reparacion");

                    b.Navigation("Personal_responsables");
                });

            modelBuilder.Entity("Dominio.Orden_reparacion", b =>
                {
                    b.Navigation("Estado_reparaciones");

                    b.Navigation("Factura");

                    b.Navigation("Repuestos_cambiar");
                });

            modelBuilder.Entity("Dominio.Pais", b =>
                {
                    b.Navigation("Regiones");
                });

            modelBuilder.Entity("Dominio.Personal_responsable", b =>
                {
                    b.Navigation("Hallazgos_encontrados");

                    b.Navigation("Repuestos_cambiar");
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.Navigation("Productos_proveedores");

                    b.Navigation("Productos_sucursales");
                });

            modelBuilder.Entity("Dominio.Producto_sucursal", b =>
                {
                    b.Navigation("Repuesto_cambiar");
                });

            modelBuilder.Entity("Dominio.Proveedor", b =>
                {
                    b.Navigation("Productos_proveedores");

                    b.Navigation("TelefonosMoviles");
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.Servicio_especializado", b =>
                {
                    b.Navigation("Ingresos_Taller");
                });

            modelBuilder.Entity("Dominio.Sucursal", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("Productos_sucursales");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Dominio.Tipo_categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Tipo_empleado", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Tipo_especialidad", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Tipo_sangre", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Tipo_telefonoMovil", b =>
                {
                    b.Navigation("TelefonosMoviles");
                });

            modelBuilder.Entity("Dominio.Vehiculo", b =>
                {
                    b.Navigation("Ingresos_Taller");
                });
#pragma warning restore 612, 618
        }
    }
}
